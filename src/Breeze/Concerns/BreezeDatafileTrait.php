<?php

namespace Gecche\Cupparis\Datafile\Breeze\Concerns;

use Closure;

use Gecche\Breeze\Breeze;
use Gecche\Cupparis\Datafile\Breeze\Concerns\HasDatafileValidation;
use Gecche\Cupparis\Datafile\Models\DatafileError;
use Gecche\DBHelper\Facades\DBHelper;
use Illuminate\Support\Arr;

use Exception;

trait BreezeDatafileTrait {



	/*
	 * DA METTERE IN RELATIONS
	 */
	public function errors()
	{
		return $this->morphMany(DatafileError::class, 'datafile_table');
	}

    /**
     * @return string
     */
    public function getDatafileIdField()
    {
        return $this->datafile_id_field;
    }

    /**
     * @param string $datafile_id_field
     */
    public function setDatafileIdField($datafile_id_field)
    {
        $this->datafile_id_field = $datafile_id_field;
    }

    /**
     * @return string
     */
    public function getRowIndexField()
    {
        return $this->row_index_field;
    }

    /**
     * @param string $row_index_field
     */
    public function setRowIndexField($row_index_field)
    {
        $this->row_index_field = $row_index_field;
    }

    /**
     * @return string
     */
    public function getDatafileIdValue()
    {
        return $this->{$this->datafile_id_field};
    }

    /**
     * @return string
     */
    public function setDatafileIdValue($datafileIdValue)
    {
        $this->{$this->datafile_id_field} = $datafileIdValue;
    }

    /**
     * @return string
     */
    public function getRowIndexValue()
    {
        return $this->{$this->row_index_field};
    }

    /**
     * @return string
     */
    public function setRowIndexValue($rowIndexValue)
    {
        $this->{$this->row_index_field} = $rowIndexValue;
    }


    /*
     * CALCOLO DEGLI HEADERS DI DEFAULT CON DB HELPERS
     */
    public function getDefaultHeaders() {

        $dbMethods = DBHelper::helper($this->getConnection()->getName());

        $headers = $dbMethods->listColumnsDatatypes($this->getTable());

        unset($headers['id']);
        unset($headers[$this->getDatafileIdField()]);
        unset($headers[$this->getRowIndexField()]);

        return array_keys($headers);
    }

    public function getHeaders() {
        return $this->headers ? $this->headers : $this->getDefaultHeaders();
    }



    /*
     * VALIDAZIONE AL SALVATAGGIO DA CAMBIARE
     */

    public function validateDatafile(array $rules = array(), array $customMessages = array(),$datafile_id = null) {
        $rules = $this->buildUniqueDatafileRules($rules,$datafile_id);
        $rules = $this->buildExistsDatafileRules($rules,$datafile_id);
        return $this->validate($rules,$customMessages);
    }

    public function saveDatafile(
        $datafile_id = null,
        array $rules = array(),
        array $customMessages = array(),
        array $options = array(),
        Closure $beforeSave = null,
        Closure $afterSave = null
    ) {

        $rules = $this->buildUniqueDatafileRules($rules,$datafile_id);
        $rules = $this->buildExistsDatafileRules($rules,$datafile_id);
        return $this->forceSave($rules, $customMessages, $options, $beforeSave,
            $afterSave); // TODO: Change the autogenerated stub
    }


    /*
     * METODI PER ESPORTAZIONE IN CSV DEGLI ERRORI PER ORA LASCIAMO PERDERE
     */

//    public function getCsvExportFields($type = 'default', $modelParams = [])
//    {
//        $attributes = parent::getCsvExportFields($type, $modelParams); // TODO: Change the autogenerated stub
//
//        if (!in_array('errors',$attributes)) {
//            array_push($attributes,'errors');
//        }
//
//        return $attributes;
//    }
//
//    public function getCsvExportErrors($type = 'default', $modelParams = []) {
//
//        $value = '';
//        $nError = 1;
//        foreach ($this->errors as $error) {
//            $value .= $nError . ' ' . $error->field_name . ': '
//                . ucfirst(Lang::getRaw('validation.' . Str::snake($error->error_name)))
//                . $this->csvExportSettings[$type]['separator'];
//            $nError++;
//        }
//
//        return $value;
//
//    }

    /*
     * NUOVO METOOD QUESTO E' OK :)
     */

    public static function getErrorsModelName() {
        $relationData = static::getRelationsData();

        return Arr::get(Arr::get($relationData,'errors',[]), 'related');

    }

    public static function getDatafileModelName() {
        $relationData = static::getRelationsData();

        return Arr::get(Arr::get($relationData,'datafile',[]), 'related');

    }


}

// End Datafile Core Model
